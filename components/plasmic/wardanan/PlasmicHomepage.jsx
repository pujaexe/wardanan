// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tBS53v6Mrk9Mm1a7gv3SHh
// Component: JIbrzkyvv9ZNB
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: 7sjzLtUSb4FTm/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import Select from "../../Select"; // plasmic-import: Y87YY94o05oIQ/component
import Select__Option from "../../Select__Option"; // plasmic-import: uRFWVVGvGVpFl/component
import Button from "../../Button"; // plasmic-import: dr59HzdIu2I8GO/component
import { useScreenVariants as useScreenVariantsvi7Y4TysbpJcNx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: VI7y4TYSBPJcNx/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_wardanan.module.css"; // plasmic-import: tBS53v6Mrk9Mm1a7gv3SHh/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: JIbrzkyvv9ZNB/css
import PiggybankPiggyBankDeleteSvgrepoComsvgIcon from "./icons/PlasmicIcon__PiggybankPiggyBankDeleteSvgrepoComsvg"; // plasmic-import: iCOkNF_AFWyNzl/icon
import DressSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__DressSvgrepoCom1Svg"; // plasmic-import: 4AvOzJXUesFrGH/icon

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsvi7Y4TysbpJcNx()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.column__artWk)}>
                <div className={classNames(projectcss.all, sty.freeBox__wreao)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__qjS2W)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"80%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/wardanan/images/bunga1Png.png",
                      fullWidth: 1080,
                      fullHeight: 1499,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__iGmzv)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"80%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/wardanan/images/bunga2Png.png",
                      fullWidth: 1080,
                      fullHeight: 1499,
                      aspectRatio: undefined
                    }}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__qc5Zk)}
                  >
                    <h6
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6__mTaij
                      )}
                    >
                      {"NOTHING FANCY BUT LOVE"}
                    </h6>

                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1___6Iums
                      )}
                    >
                      {"Hami Kukuh Wardanan"}
                    </h1>

                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__irZyA
                      )}
                    >
                      {"&"}
                    </h1>

                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1___8Ento
                      )}
                    >
                      {"Arlinda Juwitasari"}
                    </h1>

                    <h6
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6__gbJ56
                      )}
                    >
                      {
                        "warmly invite you to be a part of our private wedding celebration"
                      }
                    </h6>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__mHqeJ)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yO0Vi
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uf4Cn
                          )}
                        >
                          {"FRIDAY"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jeOlK
                          )}
                        >
                          {"16:00 PM"}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___80NL
                        )}
                      >
                        <h3
                          data-plasmic-name={"h3"}
                          data-plasmic-override={overrides.h3}
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3
                          )}
                        >
                          {"21"}
                        </h3>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tjmwV
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ftQYd
                          )}
                        >
                          {"OCTOBER"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8ElVm
                          )}
                        >
                          {"2021"}
                        </div>
                      </div>
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox___1QL8)}
                    >
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__kOwa
                        )}
                      >
                        {"TAMAN INDIE RESTO - BALAI JANUR"}
                      </h6>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zuVqy
                        )}
                      >
                        {
                          "Jl. Araya Megah No.9, Pandanwangi, Kec. Blimbing, Kota Malang, Jawa Timur"
                        }
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"sectionNote"}
                      data-plasmic-override={overrides.sectionNote}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.sectionNote)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"noteWrapper"}
                          data-plasmic-override={overrides.noteWrapper}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.noteWrapper
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"piggybank"}
                            data-plasmic-override={overrides.piggybank}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.piggybank
                            )}
                          >
                            <PiggybankPiggyBankDeleteSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__c50Lw
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yKbWc
                              )}
                            >
                              {
                                "do not feel obligate to bring any gifts to our wedding, your presence itself is already a gift for us. ❤️"
                              }
                            </div>
                          </p.Stack>

                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"dresscode"}
                            data-plasmic-override={overrides.dresscode}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.dresscode
                            )}
                          >
                            <DressSvgrepoCom1SvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__lhvd
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__v0Vpu
                              )}
                            >
                              {"anything but no white"}
                            </div>
                          </p.Stack>
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                </div>
              </div>
            ) : null}

            <div className={classNames(projectcss.all, sty.column__cmbBs)}>
              <div className={classNames(projectcss.all, sty.freeBox__eE6S)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__dw4FC)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"70%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/wardanan/images/bunga1Png2.png",
                    fullWidth: 1080,
                    fullHeight: 794,
                    aspectRatio: undefined
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__fdRij)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"70%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/wardanan/images/bunga2Png2.png",
                    fullWidth: 1080,
                    fullHeight: 794,
                    aspectRatio: undefined
                  }}
                />

                <div className={classNames(projectcss.all, sty.freeBox__o8RcH)}>
                  <p.Stack
                    as={"form"}
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    hasGap={true}
                    action={"https://sheetdb.io/api/v1/hzcottzyqnxbe"}
                    className={classNames(projectcss.all, sty.form)}
                    id={"sheetdb-form"}
                    method={"post"}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__klDV
                        )}
                      >
                        <h5
                          data-plasmic-name={"h5"}
                          data-plasmic-override={overrides.h5}
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5
                          )}
                        >
                          {"Reservation"}
                        </h5>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4Hm65
                          )}
                        >
                          {
                            "Please do RSVP before october 14th 2022 So that we can arrange accordingly"
                          }
                        </div>
                      </p.Stack>
                    ) : null}
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6RD8N
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qLhhx
                          )}
                        >
                          {"Name"}
                        </div>

                        <TextInput
                          data-plasmic-name={"textInput"}
                          data-plasmic-override={overrides.textInput}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput
                          )}
                          name={"data[name]"}
                        />
                      </p.Stack>
                    ) : null}
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__glAfQ
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hkQqo
                          )}
                        >
                          {"Will you be attending?"}
                        </div>

                        <Embed
                          className={classNames(
                            "__wab_instance",
                            sty.embedHtml__mcyNk
                          )}
                          code={
                            '<input type="radio" id="html" name="fav_language" value="HTML">\n<label for="html">Yes! wouldn’t miss it for the world!</label><br>\n<input type="radio" id="css" name="fav_language" value="CSS">\n<label for="css">Will be celebrating from a far!</label>'
                          }
                        />
                      </p.Stack>
                    ) : null}
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__q2E79
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__otjwN
                          )}
                        >
                          {"Seat reserved on your name :"}
                        </div>

                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bxAd
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bhd6I
                              )}
                            >
                              {"Adult"}
                            </div>

                            <Select
                              className={classNames(
                                "__wab_instance",
                                sty.select__xpOpz
                              )}
                              defaultValue={""}
                              name={"data[adult]"}
                              placeholder={"Select Adult"}
                            >
                              <Select__Option
                                className={classNames(
                                  "__wab_instance",
                                  sty.option__lbj2Y
                                )}
                                value={"value1"}
                              >
                                {"1"}
                              </Select__Option>

                              <Select__Option
                                className={classNames(
                                  "__wab_instance",
                                  sty.option__sSjI7
                                )}
                                value={"value2"}
                              >
                                {"2"}
                              </Select__Option>
                            </Select>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__f1R5S
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yGmRm
                              )}
                            >
                              {"Kids"}
                            </div>

                            <Select
                              className={classNames(
                                "__wab_instance",
                                sty.select__ihp9S
                              )}
                              name={"data[kids]"}
                              placeholder={"Select Kids"}
                            >
                              <Select__Option
                                className={classNames(
                                  "__wab_instance",
                                  sty.option___0Vb7Q
                                )}
                                value={"value0"}
                              >
                                {"No Kids"}
                              </Select__Option>

                              <Select__Option
                                className={classNames(
                                  "__wab_instance",
                                  sty.option__rUdbg
                                )}
                                value={"value1"}
                              >
                                {"1"}
                              </Select__Option>

                              <Select__Option
                                className={classNames(
                                  "__wab_instance",
                                  sty.option__hoOcY
                                )}
                                value={"value2"}
                              >
                                {"2"}
                              </Select__Option>

                              <Select__Option
                                className={classNames(
                                  "__wab_instance",
                                  sty.option__lspO
                                )}
                                value={"value3"}
                              >
                                {"3"}
                              </Select__Option>
                            </Select>
                          </p.Stack>
                        ) : null}
                      </p.Stack>
                    ) : null}

                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      color={"green"}
                    >
                      {"Kirim Reservasi"}
                    </Button>
                  </p.Stack>
                </div>
              </div>
            </div>
          </div>

          <Embed
            className={classNames("__wab_instance", sty.embedHtml__jgXFt)}
            code={
              "<script>\n            var form = document.getElementById('sheetdb-form');\n        form.addEventListener(\"submit\", e => {\n          e.preventDefault();\n          fetch(form.action, {\n              method : \"POST\",\n              body: new FormData(document.getElementById(\"sheetdb-form\")),\n          }).then(\n              response => response.json()\n          ).then((html) => {\n            // you can put any JS code here\n            window.open('page2.html', '_blank');\n\n          });\n        });\n        </script>"
            }
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "columns",
    "h3",
    "sectionNote",
    "noteWrapper",
    "piggybank",
    "dresscode",
    "form",
    "h5",
    "textInput",
    "textbox",
    "button"
  ],

  columns: [
    "columns",
    "h3",
    "sectionNote",
    "noteWrapper",
    "piggybank",
    "dresscode",
    "form",
    "h5",
    "textInput",
    "textbox",
    "button"
  ],

  h3: ["h3"],
  sectionNote: ["sectionNote", "noteWrapper", "piggybank", "dresscode"],
  noteWrapper: ["noteWrapper", "piggybank", "dresscode"],
  piggybank: ["piggybank"],
  dresscode: ["dresscode"],
  form: ["form", "h5", "textInput", "textbox", "button"],
  h5: ["h5"],
  textInput: ["textInput", "textbox"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    h3: makeNodeComponent("h3"),
    sectionNote: makeNodeComponent("sectionNote"),
    noteWrapper: makeNodeComponent("noteWrapper"),
    piggybank: makeNodeComponent("piggybank"),
    dresscode: makeNodeComponent("dresscode"),
    form: makeNodeComponent("form"),
    h5: makeNodeComponent("h5"),
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
